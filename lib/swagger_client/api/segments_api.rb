=begin
#Moosend API

#TODO: Add a description

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class SegmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Adding criteria to segments
    # Adds a new criterion (a rule) to the specified segment.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param segment_id The ID of the segment to update.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AddingCriteriaToSegmentsResponse]
    def adding_criteria_to_segments(format, mailing_list_id, apikey, segment_id, body, opts = {})
      data, _status_code, _headers = adding_criteria_to_segments_with_http_info(format, mailing_list_id, apikey, segment_id, body, opts)
      return data
    end

    # Adding criteria to segments
    # Adds a new criterion (a rule) to the specified segment.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param segment_id The ID of the segment to update.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddingCriteriaToSegmentsResponse, Fixnum, Hash)>] AddingCriteriaToSegmentsResponse data, response status code and response headers
    def adding_criteria_to_segments_with_http_info(format, mailing_list_id, apikey, segment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.adding_criteria_to_segments ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SegmentsApi.adding_criteria_to_segments"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SegmentsApi.adding_criteria_to_segments"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SegmentsApi.adding_criteria_to_segments"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentsApi.adding_criteria_to_segments"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SegmentsApi.adding_criteria_to_segments"
      end
      # resource path
      local_var_path = "/lists/{MailingListID}/segments/{SegmentID}/criteria/add.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s).sub('{' + 'SegmentID' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddingCriteriaToSegmentsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#adding_criteria_to_segments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creating a new segment
    # Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreatingANewSegmentResponse]
    def creating_a_new_segment(format, mailing_list_id, apikey, body, opts = {})
      data, _status_code, _headers = creating_a_new_segment_with_http_info(format, mailing_list_id, apikey, body, opts)
      return data
    end

    # Creating a new segment
    # Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatingANewSegmentResponse, Fixnum, Hash)>] CreatingANewSegmentResponse data, response status code and response headers
    def creating_a_new_segment_with_http_info(format, mailing_list_id, apikey, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.creating_a_new_segment ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SegmentsApi.creating_a_new_segment"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SegmentsApi.creating_a_new_segment"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SegmentsApi.creating_a_new_segment"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SegmentsApi.creating_a_new_segment"
      end
      # resource path
      local_var_path = "/lists/{MailingListID}/segments/create.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatingANewSegmentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#creating_a_new_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deleting A Segment
    # Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param segment_id The ID of the segment to update.
    # @param [Hash] opts the optional parameters
    # @return [DeletingASegmentResponse]
    def deleting_a_segment(format, mailing_list_id, apikey, segment_id, opts = {})
      data, _status_code, _headers = deleting_a_segment_with_http_info(format, mailing_list_id, apikey, segment_id, opts)
      return data
    end

    # Deleting A Segment
    # Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param segment_id The ID of the segment to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletingASegmentResponse, Fixnum, Hash)>] DeletingASegmentResponse data, response status code and response headers
    def deleting_a_segment_with_http_info(format, mailing_list_id, apikey, segment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.deleting_a_segment ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SegmentsApi.deleting_a_segment"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SegmentsApi.deleting_a_segment"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SegmentsApi.deleting_a_segment"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentsApi.deleting_a_segment"
      end
      # resource path
      local_var_path = "/lists/{MailingListID}/segments/{SegmentID}/delete.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s).sub('{' + 'SegmentID' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletingASegmentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#deleting_a_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Getting segment details
    # Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs
    # @param segment_id The ID of the segment to fetch results for.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [GettingSegmentDetailsResponse]
    def getting_segment_details(format, mailing_list_id, segment_id, apikey, opts = {})
      data, _status_code, _headers = getting_segment_details_with_http_info(format, mailing_list_id, segment_id, apikey, opts)
      return data
    end

    # Getting segment details
    # Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs
    # @param segment_id The ID of the segment to fetch results for.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GettingSegmentDetailsResponse, Fixnum, Hash)>] GettingSegmentDetailsResponse data, response status code and response headers
    def getting_segment_details_with_http_info(format, mailing_list_id, segment_id, apikey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.getting_segment_details ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SegmentsApi.getting_segment_details"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SegmentsApi.getting_segment_details"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentsApi.getting_segment_details"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SegmentsApi.getting_segment_details"
      end
      # resource path
      local_var_path = "/lists/{MailingListID}/segments/{SegmentID}/details.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s).sub('{' + 'SegmentID' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GettingSegmentDetailsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#getting_segment_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Getting segment subscribers
    # Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs
    # @param segment_id The ID of the segment to fetch results for.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [GettingSegmentSubscribersResponse]
    def getting_segment_subscribers(format, mailing_list_id, segment_id, apikey, opts = {})
      data, _status_code, _headers = getting_segment_subscribers_with_http_info(format, mailing_list_id, segment_id, apikey, opts)
      return data
    end

    # Getting segment subscribers
    # Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs
    # @param segment_id The ID of the segment to fetch results for.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GettingSegmentSubscribersResponse, Fixnum, Hash)>] GettingSegmentSubscribersResponse data, response status code and response headers
    def getting_segment_subscribers_with_http_info(format, mailing_list_id, segment_id, apikey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.getting_segment_subscribers ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SegmentsApi.getting_segment_subscribers"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SegmentsApi.getting_segment_subscribers"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentsApi.getting_segment_subscribers"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SegmentsApi.getting_segment_subscribers"
      end
      # resource path
      local_var_path = "/lists/{MailingListID}/segments/{SegmentID}/members.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s).sub('{' + 'SegmentID' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GettingSegmentSubscribersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#getting_segment_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Getting segments
    # Get a list of all segments with their criteria for the given mailing list.
    # @param format 
    # @param mailing_list_id 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [GettingSegmentsResponse]
    def getting_segments(format, mailing_list_id, apikey, opts = {})
      data, _status_code, _headers = getting_segments_with_http_info(format, mailing_list_id, apikey, opts)
      return data
    end

    # Getting segments
    # Get a list of all segments with their criteria for the given mailing list.
    # @param format 
    # @param mailing_list_id 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GettingSegmentsResponse, Fixnum, Hash)>] GettingSegmentsResponse data, response status code and response headers
    def getting_segments_with_http_info(format, mailing_list_id, apikey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.getting_segments ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SegmentsApi.getting_segments"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SegmentsApi.getting_segments"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SegmentsApi.getting_segments"
      end
      # resource path
      local_var_path = "/lists/{MailingListID}/segments.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GettingSegmentsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#getting_segments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updating a segment
    # Updates the properties of an existing segment. You may update the name and match type of the segment.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param segment_id The ID of the segment to update.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [UpdatingASegmentResponse]
    def updating_a_segment(format, mailing_list_id, apikey, segment_id, body, opts = {})
      data, _status_code, _headers = updating_a_segment_with_http_info(format, mailing_list_id, apikey, segment_id, body, opts)
      return data
    end

    # Updating a segment
    # Updates the properties of an existing segment. You may update the name and match type of the segment.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param segment_id The ID of the segment to update.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdatingASegmentResponse, Fixnum, Hash)>] UpdatingASegmentResponse data, response status code and response headers
    def updating_a_segment_with_http_info(format, mailing_list_id, apikey, segment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.updating_a_segment ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SegmentsApi.updating_a_segment"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SegmentsApi.updating_a_segment"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SegmentsApi.updating_a_segment"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentsApi.updating_a_segment"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SegmentsApi.updating_a_segment"
      end
      # resource path
      local_var_path = "/lists/{MailingListID}/segments/{SegmentID}/update.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s).sub('{' + 'SegmentID' + '}', segment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdatingASegmentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#updating_a_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updating segment criteria
    # Updates an existing criterion in the specified segment.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param segment_id The ID of the segment to update.
    # @param criteria_id The ID of the criterion to process.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [UpdatingSegmentCriteriaResponse]
    def updating_segment_criteria(format, mailing_list_id, apikey, segment_id, criteria_id, body, opts = {})
      data, _status_code, _headers = updating_segment_criteria_with_http_info(format, mailing_list_id, apikey, segment_id, criteria_id, body, opts)
      return data
    end

    # Updating segment criteria
    # Updates an existing criterion in the specified segment.
    # @param format 
    # @param mailing_list_id The ID of the mailing list the specified segment belongs.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param segment_id The ID of the segment to update.
    # @param criteria_id The ID of the criterion to process.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdatingSegmentCriteriaResponse, Fixnum, Hash)>] UpdatingSegmentCriteriaResponse data, response status code and response headers
    def updating_segment_criteria_with_http_info(format, mailing_list_id, apikey, segment_id, criteria_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SegmentsApi.updating_segment_criteria ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SegmentsApi.updating_segment_criteria"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SegmentsApi.updating_segment_criteria"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SegmentsApi.updating_segment_criteria"
      end
      # verify the required parameter 'segment_id' is set
      if @api_client.config.client_side_validation && segment_id.nil?
        fail ArgumentError, "Missing the required parameter 'segment_id' when calling SegmentsApi.updating_segment_criteria"
      end
      # verify the required parameter 'criteria_id' is set
      if @api_client.config.client_side_validation && criteria_id.nil?
        fail ArgumentError, "Missing the required parameter 'criteria_id' when calling SegmentsApi.updating_segment_criteria"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SegmentsApi.updating_segment_criteria"
      end
      # resource path
      local_var_path = "/lists/{MailingListID}/segments/{SegmentID}/criteria/{CriteriaID}/update.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s).sub('{' + 'SegmentID' + '}', segment_id.to_s).sub('{' + 'CriteriaID' + '}', criteria_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdatingSegmentCriteriaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SegmentsApi#updating_segment_criteria\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
