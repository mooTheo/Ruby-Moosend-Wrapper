=begin
#Moosend API

#TODO: Add a description

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class CampaignsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # AB Test Campaign Summary
    # Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested AB test campaign
    # @param [Hash] opts the optional parameters
    # @return [AbTestCampaignSummaryResponse]
    def a_b_test_campaign_summary(format, apikey, campaign_id, opts = {})
      data, _status_code, _headers = a_b_test_campaign_summary_with_http_info(format, apikey, campaign_id, opts)
      return data
    end

    # AB Test Campaign Summary
    # Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested AB test campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(AbTestCampaignSummaryResponse, Fixnum, Hash)>] AbTestCampaignSummaryResponse data, response status code and response headers
    def a_b_test_campaign_summary_with_http_info(format, apikey, campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.a_b_test_campaign_summary ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.a_b_test_campaign_summary"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.a_b_test_campaign_summary"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.a_b_test_campaign_summary"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/view_ab_summary.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AbTestCampaignSummaryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#a_b_test_campaign_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activity By Location
    # Returns a detailed report of your campaign opens (unique and total) by country.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested campaign
    # @param [Hash] opts the optional parameters
    # @return [ActivityByLocationResponse]
    def activity_by_location(format, apikey, campaign_id, opts = {})
      data, _status_code, _headers = activity_by_location_with_http_info(format, apikey, campaign_id, opts)
      return data
    end

    # Activity By Location
    # Returns a detailed report of your campaign opens (unique and total) by country.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivityByLocationResponse, Fixnum, Hash)>] ActivityByLocationResponse data, response status code and response headers
    def activity_by_location_with_http_info(format, apikey, campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.activity_by_location ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.activity_by_location"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.activity_by_location"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.activity_by_location"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/stats/countries.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ActivityByLocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#activity_by_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Campaign Summary
    # Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested campaign
    # @param [Hash] opts the optional parameters
    # @return [CampaignSummaryResponse]
    def campaign_summary(format, apikey, campaign_id, opts = {})
      data, _status_code, _headers = campaign_summary_with_http_info(format, apikey, campaign_id, opts)
      return data
    end

    # Campaign Summary
    # Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(CampaignSummaryResponse, Fixnum, Hash)>] CampaignSummaryResponse data, response status code and response headers
    def campaign_summary_with_http_info(format, apikey, campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.campaign_summary ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.campaign_summary"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.campaign_summary"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.campaign_summary"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/view_summary.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CampaignSummaryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#campaign_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cloning An Existing Campaign
    # Creates an exact copy of an existing campaign. The new campaign is created as a draft.
    # @param format 
    # @param campaign_id 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [CloningAnExistingCampaignResponse]
    def cloning_an_existing_campaign(format, campaign_id, apikey, opts = {})
      data, _status_code, _headers = cloning_an_existing_campaign_with_http_info(format, campaign_id, apikey, opts)
      return data
    end

    # Cloning An Existing Campaign
    # Creates an exact copy of an existing campaign. The new campaign is created as a draft.
    # @param format 
    # @param campaign_id 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloningAnExistingCampaignResponse, Fixnum, Hash)>] CloningAnExistingCampaignResponse data, response status code and response headers
    def cloning_an_existing_campaign_with_http_info(format, campaign_id, apikey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.cloning_an_existing_campaign ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.cloning_an_existing_campaign"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.cloning_an_existing_campaign"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.cloning_an_existing_campaign"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/clone.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CloningAnExistingCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#cloning_an_existing_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creating A Draft Campaign
    # Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreatingADraftCampaignResponse]
    def creating_a_draft_campaign(format, apikey, body, opts = {})
      data, _status_code, _headers = creating_a_draft_campaign_with_http_info(format, apikey, body, opts)
      return data
    end

    # Creating A Draft Campaign
    # Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatingADraftCampaignResponse, Fixnum, Hash)>] CreatingADraftCampaignResponse data, response status code and response headers
    def creating_a_draft_campaign_with_http_info(format, apikey, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.creating_a_draft_campaign ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.creating_a_draft_campaign"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.creating_a_draft_campaign"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CampaignsApi.creating_a_draft_campaign"
      end
      # resource path
      local_var_path = "/campaigns/create.{Format}".sub('{' + 'Format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatingADraftCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#creating_a_draft_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deleting A Campaign
    # Deletes a campaign from your account, draft or even sent.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the draft campaign to update.
    # @param [Hash] opts the optional parameters
    # @return [DeletingACampaignResponse]
    def deleting_a_campaign(format, apikey, campaign_id, opts = {})
      data, _status_code, _headers = deleting_a_campaign_with_http_info(format, apikey, campaign_id, opts)
      return data
    end

    # Deleting A Campaign
    # Deletes a campaign from your account, draft or even sent.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the draft campaign to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletingACampaignResponse, Fixnum, Hash)>] DeletingACampaignResponse data, response status code and response headers
    def deleting_a_campaign_with_http_info(format, apikey, campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.deleting_a_campaign ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.deleting_a_campaign"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.deleting_a_campaign"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.deleting_a_campaign"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/delete.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletingACampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#deleting_a_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Campaigns
    # Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [GetAllCampaignsResponse]
    def get_all_campaigns(format, apikey, opts = {})
      data, _status_code, _headers = get_all_campaigns_with_http_info(format, apikey, opts)
      return data
    end

    # Get All Campaigns
    # Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAllCampaignsResponse, Fixnum, Hash)>] GetAllCampaignsResponse data, response status code and response headers
    def get_all_campaigns_with_http_info(format, apikey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.get_all_campaigns ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.get_all_campaigns"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.get_all_campaigns"
      end
      # resource path
      local_var_path = "/campaigns.{Format}".sub('{' + 'Format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllCampaignsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#get_all_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Campaign Statistics With Paging & Filtered
    # Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested AB test campaign
    # @param type The type of the activity to display results for. This must be one of the following values : * Sent : To get information about when and to which recipients the campaign was sent. * Opened : To get information about who opened the campaign. * LinkClicked : To get information about who clicked on which link. * Forward : To get information about who forwarded the campaign using the relevant link on the email body and when. * Unsubscribed : To get information about who unsubscribed from the campaign by clicking on the unsubscribe link and when. * Bounced : To get information about which email recipients failed to receive the campaign. If not specified, the value Sent will be used by default.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page The page number to display results for. If not specified, the first page will be returned.
    # @option opts [String] :page_size The maximum number of results per page. This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.
    # @option opts [String] :from A date value that specifies since when to start returning results. If omitted, results will be returned from the moment the campaign was sent.
    # @option opts [String] :to A date value that specifies up to when to return results. If omitted, results will be returned up to date.
    # @return [GetCampaignStatisticsWithPagingFilteredResponse]
    def get_campaign_statistics_with_paging__filtered(format, apikey, campaign_id, type, opts = {})
      data, _status_code, _headers = get_campaign_statistics_with_paging__filtered_with_http_info(format, apikey, campaign_id, type, opts)
      return data
    end

    # Get Campaign Statistics With Paging &amp; Filtered
    # Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested AB test campaign
    # @param type The type of the activity to display results for. This must be one of the following values : * Sent : To get information about when and to which recipients the campaign was sent. * Opened : To get information about who opened the campaign. * LinkClicked : To get information about who clicked on which link. * Forward : To get information about who forwarded the campaign using the relevant link on the email body and when. * Unsubscribed : To get information about who unsubscribed from the campaign by clicking on the unsubscribe link and when. * Bounced : To get information about which email recipients failed to receive the campaign. If not specified, the value Sent will be used by default.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page The page number to display results for. If not specified, the first page will be returned.
    # @option opts [String] :page_size The maximum number of results per page. This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.
    # @option opts [String] :from A date value that specifies since when to start returning results. If omitted, results will be returned from the moment the campaign was sent.
    # @option opts [String] :to A date value that specifies up to when to return results. If omitted, results will be returned up to date.
    # @return [Array<(GetCampaignStatisticsWithPagingFilteredResponse, Fixnum, Hash)>] GetCampaignStatisticsWithPagingFilteredResponse data, response status code and response headers
    def get_campaign_statistics_with_paging__filtered_with_http_info(format, apikey, campaign_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.get_campaign_statistics_with_paging__filtered ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.get_campaign_statistics_with_paging__filtered"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.get_campaign_statistics_with_paging__filtered"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.get_campaign_statistics_with_paging__filtered"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling CampaignsApi.get_campaign_statistics_with_paging__filtered"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Sent', 'Opened', 'LinkClicked', 'Forward', 'Unsubscribed', 'Bounced'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of Sent, Opened, LinkClicked, Forward, Unsubscribed, Bounced"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/stats/{Type}.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s).sub('{' + 'Type' + '}', type.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey
      query_params[:'Page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'PageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'From'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'To'] = opts[:'to'] if !opts[:'to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetCampaignStatisticsWithPagingFilteredResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#get_campaign_statistics_with_paging__filtered\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Campaigns By Page
    # Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param page The page number to display results for.
    # @param [Hash] opts the optional parameters
    # @return [GetCampaignsByPageResponse]
    def get_campaigns_by_page(format, apikey, page, opts = {})
      data, _status_code, _headers = get_campaigns_by_page_with_http_info(format, apikey, page, opts)
      return data
    end

    # Get Campaigns By Page
    # Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param page The page number to display results for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCampaignsByPageResponse, Fixnum, Hash)>] GetCampaignsByPageResponse data, response status code and response headers
    def get_campaigns_by_page_with_http_info(format, apikey, page, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.get_campaigns_by_page ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.get_campaigns_by_page"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.get_campaigns_by_page"
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling CampaignsApi.get_campaigns_by_page"
      end
      # resource path
      local_var_path = "/campaigns/{Page}.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'Page' + '}', page.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetCampaignsByPageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#get_campaigns_by_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Campaigns By Page And Pagesize
    # Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param page The page number to display results for.
    # @param page_size The maximum number of results per page.  This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :short_by The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property
    # @option opts [String] :sort_method The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed
    # @return [GetCampaignsByPageAndPagesizeResponse]
    def get_campaigns_by_page_and_pagesize(format, apikey, page, page_size, opts = {})
      data, _status_code, _headers = get_campaigns_by_page_and_pagesize_with_http_info(format, apikey, page, page_size, opts)
      return data
    end

    # Get Campaigns By Page And Pagesize
    # Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param page The page number to display results for.
    # @param page_size The maximum number of results per page.  This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :short_by The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property
    # @option opts [String] :sort_method The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed
    # @return [Array<(GetCampaignsByPageAndPagesizeResponse, Fixnum, Hash)>] GetCampaignsByPageAndPagesizeResponse data, response status code and response headers
    def get_campaigns_by_page_and_pagesize_with_http_info(format, apikey, page, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.get_campaigns_by_page_and_pagesize ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.get_campaigns_by_page_and_pagesize"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.get_campaigns_by_page_and_pagesize"
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling CampaignsApi.get_campaigns_by_page_and_pagesize"
      end
      # verify the required parameter 'page_size' is set
      if @api_client.config.client_side_validation && page_size.nil?
        fail ArgumentError, "Missing the required parameter 'page_size' when calling CampaignsApi.get_campaigns_by_page_and_pagesize"
      end
      if @api_client.config.client_side_validation && opts[:'short_by'] && !['Name', 'Subject', 'Status', 'DeliveredOn', 'CreatedOn'].include?(opts[:'short_by'])
        fail ArgumentError, 'invalid value for "short_by", must be one of Name, Subject, Status, DeliveredOn, CreatedOn'
      end
      if @api_client.config.client_side_validation && opts[:'sort_method'] && !['ASC', 'DESC'].include?(opts[:'sort_method'])
        fail ArgumentError, 'invalid value for "sort_method", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/campaigns/{Page}/{PageSize}.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'Page' + '}', page.to_s).sub('{' + 'PageSize' + '}', page_size.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey
      query_params[:'ShortBy'] = opts[:'short_by'] if !opts[:'short_by'].nil?
      query_params[:'SortMethod'] = opts[:'sort_method'] if !opts[:'sort_method'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetCampaignsByPageAndPagesizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#get_campaigns_by_page_and_pagesize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Getting All Your Senders
    # Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [GettingAllYourSendersResponse]
    def getting_all_your_senders(format, apikey, opts = {})
      data, _status_code, _headers = getting_all_your_senders_with_http_info(format, apikey, opts)
      return data
    end

    # Getting All Your Senders
    # Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GettingAllYourSendersResponse, Fixnum, Hash)>] GettingAllYourSendersResponse data, response status code and response headers
    def getting_all_your_senders_with_http_info(format, apikey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.getting_all_your_senders ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.getting_all_your_senders"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.getting_all_your_senders"
      end
      # resource path
      local_var_path = "/senders/find_all.{Format}".sub('{' + 'Format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GettingAllYourSendersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#getting_all_your_senders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Getting Campaign Details
    # Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested campaign
    # @param [Hash] opts the optional parameters
    # @return [GettingCampaignDetailsResponse]
    def getting_campaign_details(format, apikey, campaign_id, opts = {})
      data, _status_code, _headers = getting_campaign_details_with_http_info(format, apikey, campaign_id, opts)
      return data
    end

    # Getting Campaign Details
    # Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(GettingCampaignDetailsResponse, Fixnum, Hash)>] GettingCampaignDetailsResponse data, response status code and response headers
    def getting_campaign_details_with_http_info(format, apikey, campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.getting_campaign_details ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.getting_campaign_details"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.getting_campaign_details"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.getting_campaign_details"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/view.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GettingCampaignDetailsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#getting_campaign_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Getting Sender Details
    # Returns basic information for the specified sender identified by its email address.
    # @param format 
    # @param email 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [GettingSenderDetailsResponse]
    def getting_sender_details(format, email, apikey, opts = {})
      data, _status_code, _headers = getting_sender_details_with_http_info(format, email, apikey, opts)
      return data
    end

    # Getting Sender Details
    # Returns basic information for the specified sender identified by its email address.
    # @param format 
    # @param email 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GettingSenderDetailsResponse, Fixnum, Hash)>] GettingSenderDetailsResponse data, response status code and response headers
    def getting_sender_details_with_http_info(format, email, apikey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.getting_sender_details ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.getting_sender_details"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling CampaignsApi.getting_sender_details"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.getting_sender_details"
      end
      # resource path
      local_var_path = "/senders/find_one.{Format}".sub('{' + 'Format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'Email'] = email
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GettingSenderDetailsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#getting_sender_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Link Activity
    # Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested campaign
    # @param [Hash] opts the optional parameters
    # @return [LinkActivityResponse]
    def link_activity(format, apikey, campaign_id, opts = {})
      data, _status_code, _headers = link_activity_with_http_info(format, apikey, campaign_id, opts)
      return data
    end

    # Link Activity
    # Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the requested campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(LinkActivityResponse, Fixnum, Hash)>] LinkActivityResponse data, response status code and response headers
    def link_activity_with_http_info(format, apikey, campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.link_activity ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.link_activity"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.link_activity"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.link_activity"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/stats/links.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LinkActivityResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#link_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Scheduling A Campaign
    # Assigns a scheduled date and time at which the campaign will be delivered.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the campaign to be scheduled
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [SchedulingACampaignResponse]
    def scheduling_a_campaign(format, apikey, campaign_id, body, opts = {})
      data, _status_code, _headers = scheduling_a_campaign_with_http_info(format, apikey, campaign_id, body, opts)
      return data
    end

    # Scheduling A Campaign
    # Assigns a scheduled date and time at which the campaign will be delivered.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the campaign to be scheduled
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SchedulingACampaignResponse, Fixnum, Hash)>] SchedulingACampaignResponse data, response status code and response headers
    def scheduling_a_campaign_with_http_info(format, apikey, campaign_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.scheduling_a_campaign ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.scheduling_a_campaign"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.scheduling_a_campaign"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.scheduling_a_campaign"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CampaignsApi.scheduling_a_campaign"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/schedule.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SchedulingACampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#scheduling_a_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sending a campaign
    # Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the draft campaign to be sent.
    # @param [Hash] opts the optional parameters
    # @return [SendingACampaignResponse]
    def sending_a_campaign(format, apikey, campaign_id, opts = {})
      data, _status_code, _headers = sending_a_campaign_with_http_info(format, apikey, campaign_id, opts)
      return data
    end

    # Sending a campaign
    # Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the draft campaign to be sent.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendingACampaignResponse, Fixnum, Hash)>] SendingACampaignResponse data, response status code and response headers
    def sending_a_campaign_with_http_info(format, apikey, campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.sending_a_campaign ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.sending_a_campaign"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.sending_a_campaign"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.sending_a_campaign"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/send.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SendingACampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#sending_a_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Testing a campaign
    # Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the draft campaign to be tested.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TestingACampaignResponse]
    def testing_a_campaign(format, apikey, campaign_id, body, opts = {})
      data, _status_code, _headers = testing_a_campaign_with_http_info(format, apikey, campaign_id, body, opts)
      return data
    end

    # Testing a campaign
    # Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the draft campaign to be tested.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TestingACampaignResponse, Fixnum, Hash)>] TestingACampaignResponse data, response status code and response headers
    def testing_a_campaign_with_http_info(format, apikey, campaign_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.testing_a_campaign ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.testing_a_campaign"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.testing_a_campaign"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.testing_a_campaign"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CampaignsApi.testing_a_campaign"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/send_test.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestingACampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#testing_a_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unscheduling a campaign
    # Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the campaign to be scheduled
    # @param [Hash] opts the optional parameters
    # @return [UnschedulingACampaignResponse]
    def unscheduling_a_campaign(format, apikey, campaign_id, opts = {})
      data, _status_code, _headers = unscheduling_a_campaign_with_http_info(format, apikey, campaign_id, opts)
      return data
    end

    # Unscheduling a campaign
    # Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the campaign to be scheduled
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnschedulingACampaignResponse, Fixnum, Hash)>] UnschedulingACampaignResponse data, response status code and response headers
    def unscheduling_a_campaign_with_http_info(format, apikey, campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.unscheduling_a_campaign ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.unscheduling_a_campaign"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.unscheduling_a_campaign"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.unscheduling_a_campaign"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/unschedule.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnschedulingACampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#unscheduling_a_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updating A Draft Campaign
    # Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the draft campaign to update.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [UpdatingADraftCampaignResponse]
    def updating_a_draft_campaign(format, apikey, campaign_id, body, opts = {})
      data, _status_code, _headers = updating_a_draft_campaign_with_http_info(format, apikey, campaign_id, body, opts)
      return data
    end

    # Updating A Draft Campaign
    # Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param campaign_id The ID of the draft campaign to update.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdatingADraftCampaignResponse, Fixnum, Hash)>] UpdatingADraftCampaignResponse data, response status code and response headers
    def updating_a_draft_campaign_with_http_info(format, apikey, campaign_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.updating_a_draft_campaign ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling CampaignsApi.updating_a_draft_campaign"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling CampaignsApi.updating_a_draft_campaign"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling CampaignsApi.updating_a_draft_campaign"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CampaignsApi.updating_a_draft_campaign"
      end
      # resource path
      local_var_path = "/campaigns/{CampaignID}/update.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdatingADraftCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#updating_a_draft_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
