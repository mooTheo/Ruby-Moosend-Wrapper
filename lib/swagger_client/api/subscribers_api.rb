=begin
#Moosend API

#TODO: Add a description

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class SubscribersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Adding multiple subscribers
    # This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to add subscribers to.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AddingMultipleSubscribersResponse]
    def adding_multiple_subscribers(format, apikey, mailing_list_id, body, opts = {})
      data, _status_code, _headers = adding_multiple_subscribers_with_http_info(format, apikey, mailing_list_id, body, opts)
      return data
    end

    # Adding multiple subscribers
    # This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to add subscribers to.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddingMultipleSubscribersResponse, Fixnum, Hash)>] AddingMultipleSubscribersResponse data, response status code and response headers
    def adding_multiple_subscribers_with_http_info(format, apikey, mailing_list_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscribersApi.adding_multiple_subscribers ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SubscribersApi.adding_multiple_subscribers"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SubscribersApi.adding_multiple_subscribers"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SubscribersApi.adding_multiple_subscribers"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscribersApi.adding_multiple_subscribers"
      end
      # resource path
      local_var_path = "/subscribers/{MailingListID}/subscribe_many.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddingMultipleSubscribersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#adding_multiple_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adding subscribers
    # Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
    # @param format 
    # @param mailing_list_id The ID of the mailing list to add the new member.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AddingSubscribersResponse]
    def adding_subscribers(format, mailing_list_id, apikey, body, opts = {})
      data, _status_code, _headers = adding_subscribers_with_http_info(format, mailing_list_id, apikey, body, opts)
      return data
    end

    # Adding subscribers
    # Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
    # @param format 
    # @param mailing_list_id The ID of the mailing list to add the new member.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddingSubscribersResponse, Fixnum, Hash)>] AddingSubscribersResponse data, response status code and response headers
    def adding_subscribers_with_http_info(format, mailing_list_id, apikey, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscribersApi.adding_subscribers ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SubscribersApi.adding_subscribers"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SubscribersApi.adding_subscribers"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SubscribersApi.adding_subscribers"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscribersApi.adding_subscribers"
      end
      # resource path
      local_var_path = "/subscribers/{MailingListID}/subscribe.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddingSubscribersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#adding_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get subscriber by email address
    # Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list where the subscriber belongs.
    # @param email The email of the subscriber.
    # @param [Hash] opts the optional parameters
    # @return [GetSubscriberByEmailAddressResponse]
    def get_subscriber_by_email_address(format, apikey, mailing_list_id, email, opts = {})
      data, _status_code, _headers = get_subscriber_by_email_address_with_http_info(format, apikey, mailing_list_id, email, opts)
      return data
    end

    # Get subscriber by email address
    # Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list where the subscriber belongs.
    # @param email The email of the subscriber.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSubscriberByEmailAddressResponse, Fixnum, Hash)>] GetSubscriberByEmailAddressResponse data, response status code and response headers
    def get_subscriber_by_email_address_with_http_info(format, apikey, mailing_list_id, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscribersApi.get_subscriber_by_email_address ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SubscribersApi.get_subscriber_by_email_address"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SubscribersApi.get_subscriber_by_email_address"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SubscribersApi.get_subscriber_by_email_address"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling SubscribersApi.get_subscriber_by_email_address"
      end
      # resource path
      local_var_path = "/subscribers/{MailingListID}/view.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey
      query_params[:'Email'] = email

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSubscriberByEmailAddressResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#get_subscriber_by_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get subscriber by id
    # Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to search the subscriber in.
    # @param subscriber_id The id of the subscriber being searched.
    # @param [Hash] opts the optional parameters
    # @return [GetSubscriberByIdResponse]
    def get_subscriber_by_id(format, apikey, mailing_list_id, subscriber_id, opts = {})
      data, _status_code, _headers = get_subscriber_by_id_with_http_info(format, apikey, mailing_list_id, subscriber_id, opts)
      return data
    end

    # Get subscriber by id
    # Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to search the subscriber in.
    # @param subscriber_id The id of the subscriber being searched.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSubscriberByIdResponse, Fixnum, Hash)>] GetSubscriberByIdResponse data, response status code and response headers
    def get_subscriber_by_id_with_http_info(format, apikey, mailing_list_id, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscribersApi.get_subscriber_by_id ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SubscribersApi.get_subscriber_by_id"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SubscribersApi.get_subscriber_by_id"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SubscribersApi.get_subscriber_by_id"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.get_subscriber_by_id"
      end
      # resource path
      local_var_path = "/subscribers/{MailingListID}/find/{SubscriberID}.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s).sub('{' + 'SubscriberID' + '}', subscriber_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSubscriberByIdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#get_subscriber_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Getting subscribers
    # Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param mailing_list_id The ID of the mailing list where the subscribers belong.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param status Specifies what type of subscriber statistics results will be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Specifies the page of subscriber statistics results will be returned.
    # @option opts [Float] :page_size Specifies the page size of subscriber statistics results will be returned.
    # @return [GettingSubscribersResponse]
    def getting_subscribers(format, mailing_list_id, apikey, status, opts = {})
      data, _status_code, _headers = getting_subscribers_with_http_info(format, mailing_list_id, apikey, status, opts)
      return data
    end

    # Getting subscribers
    # Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
    # @param format 
    # @param mailing_list_id The ID of the mailing list where the subscribers belong.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param status Specifies what type of subscriber statistics results will be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :page Specifies the page of subscriber statistics results will be returned.
    # @option opts [Float] :page_size Specifies the page size of subscriber statistics results will be returned.
    # @return [Array<(GettingSubscribersResponse, Fixnum, Hash)>] GettingSubscribersResponse data, response status code and response headers
    def getting_subscribers_with_http_info(format, mailing_list_id, apikey, status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscribersApi.getting_subscribers ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SubscribersApi.getting_subscribers"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SubscribersApi.getting_subscribers"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SubscribersApi.getting_subscribers"
      end
      # verify the required parameter 'status' is set
      if @api_client.config.client_side_validation && status.nil?
        fail ArgumentError, "Missing the required parameter 'status' when calling SubscribersApi.getting_subscribers"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['Subscribed', 'Unsubscribed', 'Bounced', 'Removed'].include?(status)
        fail ArgumentError, "invalid value for 'status', must be one of Subscribed, Unsubscribed, Bounced, Removed"
      end
      # resource path
      local_var_path = "/lists/{MailingListID}/subscribers/{Status}.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s).sub('{' + 'Status' + '}', status.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey
      query_params[:'Page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'PageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GettingSubscribersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#getting_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removing a subscriber
    # Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to remove the subscriber from.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [RemovingASubscriberResponse]
    def removing_a_subscriber(format, apikey, mailing_list_id, body, opts = {})
      data, _status_code, _headers = removing_a_subscriber_with_http_info(format, apikey, mailing_list_id, body, opts)
      return data
    end

    # Removing a subscriber
    # Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to remove the subscriber from.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemovingASubscriberResponse, Fixnum, Hash)>] RemovingASubscriberResponse data, response status code and response headers
    def removing_a_subscriber_with_http_info(format, apikey, mailing_list_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscribersApi.removing_a_subscriber ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SubscribersApi.removing_a_subscriber"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SubscribersApi.removing_a_subscriber"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SubscribersApi.removing_a_subscriber"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscribersApi.removing_a_subscriber"
      end
      # resource path
      local_var_path = "/subscribers/{MailingListID}/remove.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RemovingASubscriberResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#removing_a_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removing multiple subscribers
    # Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to remove the subscribers from.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [RemovingMultipleSubscribersResponse]
    def removing_multiple_subscribers(format, apikey, mailing_list_id, body, opts = {})
      data, _status_code, _headers = removing_multiple_subscribers_with_http_info(format, apikey, mailing_list_id, body, opts)
      return data
    end

    # Removing multiple subscribers
    # Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to remove the subscribers from.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemovingMultipleSubscribersResponse, Fixnum, Hash)>] RemovingMultipleSubscribersResponse data, response status code and response headers
    def removing_multiple_subscribers_with_http_info(format, apikey, mailing_list_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscribersApi.removing_multiple_subscribers ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SubscribersApi.removing_multiple_subscribers"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SubscribersApi.removing_multiple_subscribers"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SubscribersApi.removing_multiple_subscribers"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscribersApi.removing_multiple_subscribers"
      end
      # resource path
      local_var_path = "/subscribers/{MailingListID}/remove_many.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RemovingMultipleSubscribersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#removing_multiple_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsubscribing subscribers from account
    # Unsubscribes a subscriber from the account.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [UnsubscribingSubscribersFromAccountResponse]
    def unsubscribing_subscribers_from_account(format, apikey, body, opts = {})
      data, _status_code, _headers = unsubscribing_subscribers_from_account_with_http_info(format, apikey, body, opts)
      return data
    end

    # Unsubscribing subscribers from account
    # Unsubscribes a subscriber from the account.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnsubscribingSubscribersFromAccountResponse, Fixnum, Hash)>] UnsubscribingSubscribersFromAccountResponse data, response status code and response headers
    def unsubscribing_subscribers_from_account_with_http_info(format, apikey, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscribersApi.unsubscribing_subscribers_from_account ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SubscribersApi.unsubscribing_subscribers_from_account"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SubscribersApi.unsubscribing_subscribers_from_account"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscribersApi.unsubscribing_subscribers_from_account"
      end
      # resource path
      local_var_path = "/subscribers/unsubscribe.{Format}".sub('{' + 'Format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnsubscribingSubscribersFromAccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#unsubscribing_subscribers_from_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsubscribing subscribers from mailing list
    # Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to add subscribers to.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [UnsubscribingSubscribersFromMailingListResponse]
    def unsubscribing_subscribers_from_mailing_list(format, apikey, mailing_list_id, body, opts = {})
      data, _status_code, _headers = unsubscribing_subscribers_from_mailing_list_with_http_info(format, apikey, mailing_list_id, body, opts)
      return data
    end

    # Unsubscribing subscribers from mailing list
    # Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to add subscribers to.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnsubscribingSubscribersFromMailingListResponse, Fixnum, Hash)>] UnsubscribingSubscribersFromMailingListResponse data, response status code and response headers
    def unsubscribing_subscribers_from_mailing_list_with_http_info(format, apikey, mailing_list_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscribersApi.unsubscribing_subscribers_from_mailing_list ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SubscribersApi.unsubscribing_subscribers_from_mailing_list"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SubscribersApi.unsubscribing_subscribers_from_mailing_list"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SubscribersApi.unsubscribing_subscribers_from_mailing_list"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscribersApi.unsubscribing_subscribers_from_mailing_list"
      end
      # resource path
      local_var_path = "/subscribers/{MailingListID}/unsubscribe.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnsubscribingSubscribersFromMailingListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#unsubscribing_subscribers_from_mailing_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsubscribing subscribers from mailing list and a specified campaign
    # Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \"suppression list and unsubscribe settings\" and will remove the subscriber from all other mailing lists or not accordingly.
    # @param format 
    # @param campaign_id The ID of the campaign that was sent to the specific mailing list.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to remove the subscriber from.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse]
    def unsubscribing_subscribers_from_mailing_list_and_a_specified_campaign(format, campaign_id, apikey, mailing_list_id, body, opts = {})
      data, _status_code, _headers = unsubscribing_subscribers_from_mailing_list_and_a_specified_campaign_with_http_info(format, campaign_id, apikey, mailing_list_id, body, opts)
      return data
    end

    # Unsubscribing subscribers from mailing list and a specified campaign
    # Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
    # @param format 
    # @param campaign_id The ID of the campaign that was sent to the specific mailing list.
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list to remove the subscriber from.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse, Fixnum, Hash)>] UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse data, response status code and response headers
    def unsubscribing_subscribers_from_mailing_list_and_a_specified_campaign_with_http_info(format, campaign_id, apikey, mailing_list_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscribersApi.unsubscribing_subscribers_from_mailing_list_and_a_specified_campaign ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SubscribersApi.unsubscribing_subscribers_from_mailing_list_and_a_specified_campaign"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling SubscribersApi.unsubscribing_subscribers_from_mailing_list_and_a_specified_campaign"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SubscribersApi.unsubscribing_subscribers_from_mailing_list_and_a_specified_campaign"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SubscribersApi.unsubscribing_subscribers_from_mailing_list_and_a_specified_campaign"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscribersApi.unsubscribing_subscribers_from_mailing_list_and_a_specified_campaign"
      end
      # resource path
      local_var_path = "/subscribers/{MailingListID}/{CampaignID}/unsubscribe.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'CampaignID' + '}', campaign_id.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#unsubscribing_subscribers_from_mailing_list_and_a_specified_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updating a subscriber
    # Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list that contains the subscriber
    # @param subscriber_id The id of the subscriber to be updated
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [UpdatingASubscriberResponse]
    def updating_a_subscriber(format, apikey, mailing_list_id, subscriber_id, body, opts = {})
      data, _status_code, _headers = updating_a_subscriber_with_http_info(format, apikey, mailing_list_id, subscriber_id, body, opts)
      return data
    end

    # Updating a subscriber
    # Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
    # @param format 
    # @param apikey You may find your API Key or generate a new one in your account settings.
    # @param mailing_list_id The ID of the mailing list that contains the subscriber
    # @param subscriber_id The id of the subscriber to be updated
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdatingASubscriberResponse, Fixnum, Hash)>] UpdatingASubscriberResponse data, response status code and response headers
    def updating_a_subscriber_with_http_info(format, apikey, mailing_list_id, subscriber_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SubscribersApi.updating_a_subscriber ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling SubscribersApi.updating_a_subscriber"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json', 'xml'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json, xml"
      end
      # verify the required parameter 'apikey' is set
      if @api_client.config.client_side_validation && apikey.nil?
        fail ArgumentError, "Missing the required parameter 'apikey' when calling SubscribersApi.updating_a_subscriber"
      end
      # verify the required parameter 'mailing_list_id' is set
      if @api_client.config.client_side_validation && mailing_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'mailing_list_id' when calling SubscribersApi.updating_a_subscriber"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.updating_a_subscriber"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SubscribersApi.updating_a_subscriber"
      end
      # resource path
      local_var_path = "/subscribers/{MailingListID}/update/{SubscriberID}.{Format}".sub('{' + 'Format' + '}', format.to_s).sub('{' + 'MailingListID' + '}', mailing_list_id.to_s).sub('{' + 'SubscriberID' + '}', subscriber_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'apikey'] = apikey

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdatingASubscriberResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#updating_a_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
