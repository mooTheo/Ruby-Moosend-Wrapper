=begin
#Moosend API

#TODO: Add a description

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class CreatingADraftCampaignRequest
    # The name of the campaign.
    attr_accessor :name

    # The subject line of the new campaign.
    attr_accessor :subject

    # The sender email of the campaign.
    attr_accessor :sender_email

    # The email address to which recipients replies will arrive. It must be one of your sender accounts. If not specified, the sender's email will be assumed.
    attr_accessor :reply_to_email

    # A flag that defines if a campaign is an AB campaign.
    attr_accessor :is_ab

    # The email address to which a confirmation message will be,  sent when the campaign has been successfully sent.
    attr_accessor :confirmation_to_email

    # A url to retrieve the html content for the campaign. We'll automatically move all CSS inline.
    attr_accessor :web_location

    # A list of mailing lists in your account to which the campaign will be sent to.
    attr_accessor :mailing_lists

    # The ID of a segment in the specified mailing list to filter the recipients with. If not specified, the campaign will be sent to all active subscribers of the mailing list.
    attr_accessor :segment_id

    # If you want to send an AB split campaign you should specify this parameter to one of the following values.  * `Subject` * `Sender` * `Content`
    attr_accessor :ab_campaign_type

    # Tracks traffic from your campaign to your site. Note: You need to have Google Analytics configured on your site to use this feature.
    attr_accessor :track_in_google_analytics

    # Moosend wraps your own links with its own to enable link click tracking. Check this box if you don't wish to track link click traffic through Moosend.
    attr_accessor :dont_track_link_clicks

    # If you wish to send an AB split campaign with two different versions of the subject line , you must specify the second subject using this parameter. If specified in any other campaign type, it will be ignored.
    attr_accessor :subject_b

    # If you wish to send an AB split campaign with two different versions of the html content, you must specify where the second html content will be retrieved from using this parameter. If specified in any other campaign type, it will be ignored.
    attr_accessor :web_location_b

    # If you wish to send an AB split campaign with two different versions of the sender , you must specify the second sender email address using this parameter. This must be one of your sender signatures defined in your account. If specified in any other campaign type, it will be ignored.
    attr_accessor :sender_email_b

    # If you choose to send an AB campaign type, you must set this parameter to specify how long the test will run, before determining which will be the winning version to be sent to the rest of the recipients. This should be an integer value between 1 and 24. If specified in a regular campaign, it will be ignored.
    attr_accessor :hours_to_test

    # If you choose to send an AB campaign type, you must set this parameter to specify a portion of the target recipients that will receive the test versions. For example, if you specify 10, then 10% of your recipients will receive the A version and another 10% will receive the B version. The specified value should be an integer between 5 and 40. If specified in a regular campaign, it will be ignored. (optional, string)
    attr_accessor :list_percentage

    # If you choose to send an AB campaign type, you may set this parameter to one of the following values to specify the method to determine the winning version for the test.   If not set, OpenRate will be assumed. If specified in a regular campaign, it will be ignored. * `OpenRate` * `TotalUniqueClicks`
    attr_accessor :ab_winner_selection_type


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'Name',
        :'subject' => :'Subject',
        :'sender_email' => :'SenderEmail',
        :'reply_to_email' => :'ReplyToEmail',
        :'is_ab' => :'IsAB',
        :'confirmation_to_email' => :'ConfirmationToEmail',
        :'web_location' => :'WebLocation',
        :'mailing_lists' => :'MailingLists',
        :'segment_id' => :'SegmentID',
        :'ab_campaign_type' => :'ABCampaignType',
        :'track_in_google_analytics' => :'TrackInGoogleAnalytics',
        :'dont_track_link_clicks' => :'DontTrackLinkClicks',
        :'subject_b' => :'SubjectB',
        :'web_location_b' => :'WebLocationB',
        :'sender_email_b' => :'SenderEmailB',
        :'hours_to_test' => :'HoursToTest',
        :'list_percentage' => :'ListPercentage',
        :'ab_winner_selection_type' => :'ABWinnerSelectionType'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'subject' => :'String',
        :'sender_email' => :'String',
        :'reply_to_email' => :'String',
        :'is_ab' => :'String',
        :'confirmation_to_email' => :'String',
        :'web_location' => :'String',
        :'mailing_lists' => :'Array<MailingLists>',
        :'segment_id' => :'String',
        :'ab_campaign_type' => :'String',
        :'track_in_google_analytics' => :'String',
        :'dont_track_link_clicks' => :'String',
        :'subject_b' => :'String',
        :'web_location_b' => :'String',
        :'sender_email_b' => :'String',
        :'hours_to_test' => :'String',
        :'list_percentage' => :'String',
        :'ab_winner_selection_type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Name')
        self.name = attributes[:'Name']
      end

      if attributes.has_key?(:'Subject')
        self.subject = attributes[:'Subject']
      end

      if attributes.has_key?(:'SenderEmail')
        self.sender_email = attributes[:'SenderEmail']
      end

      if attributes.has_key?(:'ReplyToEmail')
        self.reply_to_email = attributes[:'ReplyToEmail']
      end

      if attributes.has_key?(:'IsAB')
        self.is_ab = attributes[:'IsAB']
      end

      if attributes.has_key?(:'ConfirmationToEmail')
        self.confirmation_to_email = attributes[:'ConfirmationToEmail']
      end

      if attributes.has_key?(:'WebLocation')
        self.web_location = attributes[:'WebLocation']
      end

      if attributes.has_key?(:'MailingLists')
        if (value = attributes[:'MailingLists']).is_a?(Array)
          self.mailing_lists = value
        end
      end

      if attributes.has_key?(:'SegmentID')
        self.segment_id = attributes[:'SegmentID']
      end

      if attributes.has_key?(:'ABCampaignType')
        self.ab_campaign_type = attributes[:'ABCampaignType']
      end

      if attributes.has_key?(:'TrackInGoogleAnalytics')
        self.track_in_google_analytics = attributes[:'TrackInGoogleAnalytics']
      end

      if attributes.has_key?(:'DontTrackLinkClicks')
        self.dont_track_link_clicks = attributes[:'DontTrackLinkClicks']
      end

      if attributes.has_key?(:'SubjectB')
        self.subject_b = attributes[:'SubjectB']
      end

      if attributes.has_key?(:'WebLocationB')
        self.web_location_b = attributes[:'WebLocationB']
      end

      if attributes.has_key?(:'SenderEmailB')
        self.sender_email_b = attributes[:'SenderEmailB']
      end

      if attributes.has_key?(:'HoursToTest')
        self.hours_to_test = attributes[:'HoursToTest']
      end

      if attributes.has_key?(:'ListPercentage')
        self.list_percentage = attributes[:'ListPercentage']
      end

      if attributes.has_key?(:'ABWinnerSelectionType')
        self.ab_winner_selection_type = attributes[:'ABWinnerSelectionType']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @subject.nil?
        invalid_properties.push("invalid value for 'subject', subject cannot be nil.")
      end

      if @sender_email.nil?
        invalid_properties.push("invalid value for 'sender_email', sender_email cannot be nil.")
      end

      if @reply_to_email.nil?
        invalid_properties.push("invalid value for 'reply_to_email', reply_to_email cannot be nil.")
      end

      if @is_ab.nil?
        invalid_properties.push("invalid value for 'is_ab', is_ab cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @subject.nil?
      return false if @sender_email.nil?
      return false if @reply_to_email.nil?
      return false if @is_ab.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          subject == o.subject &&
          sender_email == o.sender_email &&
          reply_to_email == o.reply_to_email &&
          is_ab == o.is_ab &&
          confirmation_to_email == o.confirmation_to_email &&
          web_location == o.web_location &&
          mailing_lists == o.mailing_lists &&
          segment_id == o.segment_id &&
          ab_campaign_type == o.ab_campaign_type &&
          track_in_google_analytics == o.track_in_google_analytics &&
          dont_track_link_clicks == o.dont_track_link_clicks &&
          subject_b == o.subject_b &&
          web_location_b == o.web_location_b &&
          sender_email_b == o.sender_email_b &&
          hours_to_test == o.hours_to_test &&
          list_percentage == o.list_percentage &&
          ab_winner_selection_type == o.ab_winner_selection_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, subject, sender_email, reply_to_email, is_ab, confirmation_to_email, web_location, mailing_lists, segment_id, ab_campaign_type, track_in_google_analytics, dont_track_link_clicks, subject_b, web_location_b, sender_email_b, hours_to_test, list_percentage, ab_winner_selection_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
