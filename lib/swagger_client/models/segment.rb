=begin
#Moosend API

#TODO: Add a description

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class Segment
    # 
    attr_accessor :created_by

    # 
    attr_accessor :created_on

    # 
    attr_accessor :criteria

    # 
    attr_accessor :description

    # 
    attr_accessor :fetch_type

    # 
    attr_accessor :fetch_value

    # 
    attr_accessor :id

    # 
    attr_accessor :match_type

    # 
    attr_accessor :name

    # 
    attr_accessor :updated_by

    # 
    attr_accessor :updated_on


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created_by' => :'CreatedBy',
        :'created_on' => :'CreatedOn',
        :'criteria' => :'Criteria',
        :'description' => :'Description',
        :'fetch_type' => :'FetchType',
        :'fetch_value' => :'FetchValue',
        :'id' => :'ID',
        :'match_type' => :'MatchType',
        :'name' => :'Name',
        :'updated_by' => :'UpdatedBy',
        :'updated_on' => :'UpdatedOn'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created_by' => :'String',
        :'created_on' => :'String',
        :'criteria' => :'Array<Criterion>',
        :'description' => :'String',
        :'fetch_type' => :'Float',
        :'fetch_value' => :'Float',
        :'id' => :'Float',
        :'match_type' => :'Float',
        :'name' => :'String',
        :'updated_by' => :'String',
        :'updated_on' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'CreatedBy')
        self.created_by = attributes[:'CreatedBy']
      end

      if attributes.has_key?(:'CreatedOn')
        self.created_on = attributes[:'CreatedOn']
      end

      if attributes.has_key?(:'Criteria')
        if (value = attributes[:'Criteria']).is_a?(Array)
          self.criteria = value
        end
      end

      if attributes.has_key?(:'Description')
        self.description = attributes[:'Description']
      end

      if attributes.has_key?(:'FetchType')
        self.fetch_type = attributes[:'FetchType']
      end

      if attributes.has_key?(:'FetchValue')
        self.fetch_value = attributes[:'FetchValue']
      end

      if attributes.has_key?(:'ID')
        self.id = attributes[:'ID']
      end

      if attributes.has_key?(:'MatchType')
        self.match_type = attributes[:'MatchType']
      end

      if attributes.has_key?(:'Name')
        self.name = attributes[:'Name']
      end

      if attributes.has_key?(:'UpdatedBy')
        self.updated_by = attributes[:'UpdatedBy']
      end

      if attributes.has_key?(:'UpdatedOn')
        self.updated_on = attributes[:'UpdatedOn']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_by == o.created_by &&
          created_on == o.created_on &&
          criteria == o.criteria &&
          description == o.description &&
          fetch_type == o.fetch_type &&
          fetch_value == o.fetch_value &&
          id == o.id &&
          match_type == o.match_type &&
          name == o.name &&
          updated_by == o.updated_by &&
          updated_on == o.updated_on
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created_by, created_on, criteria, description, fetch_type, fetch_value, id, match_type, name, updated_by, updated_on].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
